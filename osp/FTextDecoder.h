//
// Open Service Platform
// Copyright (c) 2012 Samsung Electronics Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the License);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

/**
 * @file		FTextDecoder.h
 * @brief		This is the header file for the %Decoder class.
 *
 * This header file contains the declarations of the %Decoder class.
 */

#ifndef _FTEXT_DECODER_H_
#define _FTEXT_DECODER_H_

#include <FBaseObject.h>
#include <FBaseTypes.h>
#include <FBaseBuffer.h>

namespace Tizen { namespace Text
{
/**
 * @class	Decoder
 * @brief	This class is an implementation of the character decoder.
 *
 * @since	2.0
 *
 * The %Decoder class converts blocks of encoded bytes into blocks of Unicode characters
 * through successive calls to the GetCharsN() method. This class maintains state consistency information between
 * successive calls to GetCharsN(), enabling it to decode a sequence of bytes that span adjacent blocks.
 *
 * For more information on the class features, see <a href="../org.tizen.native.appprogramming/html/guide/text/converting_text_data_separate_blocks.htm">Converting Text Data in Separate Blocks</a>.
 *
 */

class _OSP_EXPORT_ Decoder
	: public Tizen::Base::Object
{
public:
	/**
	 * This is the destructor for this class. @n
	 * This destructor overrides Tizen::Base::Object::~Object().
	 *
	 * @since	2.0
	 */
	virtual ~Decoder(void) { };

	/**
	 * Gets the total number of characters that are generated by decoding a range of elements specified in the Tizen::Base::ByteBuffer instance.
	 *
	 * @since			2.0
	 *
	 * @return		An error code
	 * @param[in]	bytes An instance of Tizen::Base::ByteBuffer to decode
	 * @param[in]   byteIndex The index from where decoding begins
	 * @param[in]   byteCount The total number of bytes to decode
	 * @param[in]   flush Set to @c true to allow this instance to flush its state at the end of the conversion, @n
	 * @param[out]  charCount The total number of characters that are generated by decoding the specified Tizen::Base::ByteBuffer instance
	 *						else @c false
	 * @exception	E_SUCCESS                The method is successful.
	 * @exception	E_INVALID_ARG            A specified input parameter is invalid, or
	 *                                         the specified @c bytes is empty.
	 * @exception	E_OUT_OF_RANGE        The value of an argument is outside the valid range defined by the method, or
	 *										   the length of the specified @c byteIndex or @c byteCount is greater than the length of the specified @c bytes.
	 * @exception	E_UNDERFLOW              This operation has caused the memory to underflow, or
	 *								           the sum of the length of the specified @c byteIndex and @c byteCount is greater than the length of the specified @c bytes.
	 * @exception	E_INVALID_ENCODING_RANGE	The specified string contains code points that are outside the bounds of the character encoding scheme.
	 * @see         Encoder::GetByteCount()
	 */
	virtual result GetCharCount(const Tizen::Base::ByteBuffer& bytes,
		int byteIndex, int byteCount, int& charCount, bool flush = false) const = 0;

	/**
	 * Decodes an instance of Tizen::Base::ByteBuffer into an instance of Tizen::Base::WcharBuffer.
	 *
	 * @since			2.0
	 *
	 * @return		A pointer to the Tizen::Base::WcharBuffer instance where the resultant decoded data is stored, @n
	 *				else @c null if an exception occurs @n
	 *				The buffer limit is the position of the last decoded byte plus one in the buffer and the starting position is zero.
	 * @param[in]	bytes An instance of Tizen::Base::ByteBuffer to decode
	 * @param[in]   flush Set to @c true to allow this instance to flush its state at the end of the conversion, @n
	 *				else @c false
	 * @exception	E_SUCCESS                The method is successful.
	 * @exception	E_OUT_OF_MEMORY          The memory is insufficient.
	 * @exception	E_INVALID_ARG            A specified input parameter is invalid, or
	 *                                         the specified @c bytes is empty.
	 * @exception	E_INVALID_ENCODING_RANGE The specified string contains code points that are outside the bounds of the character encoding scheme.
	 * @remarks		The specific error code can be accessed using the GetLastResult() method.
	 * @see			Encoder::GetBytesN()
	 */
	virtual Tizen::Base::WcharBuffer* GetCharsN(const Tizen::Base::ByteBuffer& bytes, bool flush = false) const = 0;

	/**
	 * Decodes an instance of Tizen::Base::ByteBuffer into an instance of Tizen::Base::WcharBuffer as per the specified range.
	 *
	 * @since			2.0
	 *
	 * @return		A pointer to the Tizen::Base::WcharBuffer instance where the resultant decoded data is stored, @n
	 *				else @c null if an exception occurs @n
	 *				The buffer limit is the position of the last decoded byte in the buffer and the starting position is zero.
	 * @param[in]	bytes An instance of Tizen::Base::ByteBuffer to decode
	 * @param[in]   byteIndex The index from where decoding begins
	 * @param[in]   byteCount The total number of bytes to decode
	 * @param[in]   flush Set to @c true to allow this instance to flush its state at the end of the conversion, @n
	 *				else @c false
	 * @exception	E_SUCCESS                The method is successful.
	 * @exception	E_OUT_OF_MEMORY          The memory is insufficient.
	 * @exception	E_INVALID_ARG            A specified input parameter is invalid, or
	 *                                         the specified @c bytes is empty.
	 * @exception	E_OUT_OF_RANGE	     The value of an argument is outside the valid range defined by the method, or
	 *									       the length of the specified @c byteIndex or @c byteCount is greater than the length of the specified @c bytes.
	 * @exception	E_UNDERFLOW	             This operation has caused the memory to underflow, or
	 *										   the sum of the length of the specified @c byteIndex and @c byteCount is greater than the length of the specified @c bytes.
	 * @exception	E_INVALID_ENCODING_RANGE The specified string contains code points that are outside the bounds of the character encoding scheme.
	 * @remarks     The GetCharsN() method maintains state consistency between conversions.
	 * @remarks		The specific error code can be accessed using the GetLastResult() method.
	 * @remarks		The pointer to the Tizen::Base::WcharBuffer instance is not terminated by a @c null character.
	 * @see			Encoder::GetBytesN()
	 */
	virtual Tizen::Base::WcharBuffer* GetCharsN(const Tizen::Base::ByteBuffer& bytes, int byteIndex, int byteCount,
		bool flush = false) const = 0;

protected:
	Decoder(void)
		: _pDecoderImpl(null){};
	friend class _DecoderImpl;
	class _DecoderImpl* _pDecoderImpl;

private:
	/**
	 * The implementation of this copy constructor is intentionally blank and declared as private to
	 * prohibit copying of objects.
	 */
	Decoder(const Decoder& decoder);

	/**
	 * The implementation of this copy assignment operator is intentionally blank and declared as private
	 * to prohibit copying of objects.
	 */
	Decoder& operator =(const Decoder& decoder);

};

} } // Tizen::Text
#endif //_FTEXT_DECODER_H_
