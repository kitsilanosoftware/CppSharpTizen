//
// Copyright (c) 2012 Samsung Electronics Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the License);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

/**
 * @file		FTextUtf8Decoder.h
 * @brief		This is the header file for the %Utf8Decoder class.
 *
 * This header file contains the declarations of the %Utf8Decoder class.
 *
 */
#ifndef _FTEXT_UTF8_DECODER_H_
#define _FTEXT_UTF8_DECODER_H_

#include <FTextDecoder.h>


namespace Tizen { namespace Text
{
/**
 * @class	Utf8Decoder
 * @brief	This class is an implementation of the UTF-8 decoder.
 *
 * @since	2.0
 *
 * @final	This class is not intended for extension.
 *
 * The %Utf8Decoder class converts blocks of bytes into decoded blocks of characters.
 * Universal Transformation Format-8 (UTF-8) is a translated language that is used on the internet.
 * It converts the unicode into 8-bit bytes.
 * UTF-8 encoding supports all unicode character values and surrogates.
 *
 * For more information on the class features, see <a href="../org.tizen.native.appprogramming/html/guide/text/converting_text_data_separate_blocks.htm">Converting Text Data in Separate Blocks</a>.
 *
 * The following example demonstrates how to use the %Utf8Decoder class.
 *
 *	@code
 *	#include <FBase.h>
 *	#include <FText.h>
 *
 *	using namespace Tizen::Base;
 *	using namespace Tizen::Text;
 *
 *	void
 *	MyClass::Utf8DecoderSample(void)
 *	{
 *		Utf8Decoder utf8De;
 *
 *		// Fills a ByteBuffer with long strings to decode it into the unicode strings
 *		ByteBuffer* pBB = PrepareUtf8DecoderSample();
 *
 *		int byteBufSize = pBB->GetCapacity();
 *
 *		int charCount;
 *		utf8De.GetCharCount(*pBB, 0, byteBufSize, charCount);
 *
 *		WcharBuffer deChars;
 *		deChars.Construct(charCount + 1);		// for L'\0'
 *
 *		int byteIndex = 0;
 *		int byteCount = 100;
 *
 *		while (byteIndex < byteBufSize)
 *		{
 *			WcharBuffer* pMB = null;
 *
 *			if (byteBufSize - byteIndex < byteCount)
 *			{
 *				byteCount = byteBufSize - byteIndex;
 *			}
 *
 *			// Converts Utf8 to Unicode using Utf8Decoder
 *			pMB = utf8De.GetCharsN(*pBB, byteIndex, byteCount);
 *
 *			deChars.CopyFrom(*pMB);
 *			byteIndex += byteCount;
 *
 *			delete pMB;
 *		}
 *
 *		deChars.Set(L'\0');
 *		deChars.Rewind();
 *
 *		delete pBB;
 *	}
 *	@endcode
 */


class _OSP_EXPORT_ Utf8Decoder
	: public Decoder
{
public:
	/**
	 * This is the default constructor for this class.
	 *
	 * @since	2.0
	 */
	Utf8Decoder(void);
	/**
	 * This is the destructor for this class. @n
	 * This destructor overrides Tizen::Text::Decoder::~Decoder().
	 *
	 * @since	2.0
	 */
	virtual ~Utf8Decoder(void);

	/**
	 * Gets the total number of characters that are generated by decoding an instance of Tizen::Base::ByteBuffer.
	 *
	 * @since			2.0
	 *
	 * @return		An error code
	 * @param[in]	bytes                   An instance of Tizen::Base::ByteBuffer to decode
	 * @param[in] byteIndex                  The index from where decoding begins
	 * @param[in] byteCount                 The total number of bytes to decode
	 * @param[out]  charCount               The total number of characters that are generated by decoding the specified Tizen::Base::ByteBuffer instance
	 * @param[in]   flush                   Set to @c true to allow this instance to flush its state at the end of the conversion, @n
	 *						                else @c false
	 * @exception	E_SUCCESS				The method is successful.
	 * @exception	E_INVALID_ARG			A specified input parameter is invalid, or
	 *                                      the specified @c bytes is empty.
	 * @exception	E_OUT_OF_RANGE			The value of an argument is outside the valid range defined by the method, or
	 *                                      the length of the specified @c byteIndex or @c byteCount is greater than the length of the specified @c bytes.
	 * @exception	E_UNDERFLOW				This operation has caused the memory to underflow, or
	 *										the sum of the length of the specified @c byteIndex and @c byteCount is greater than the length of the specified @c bytes.
	 * @exception	E_INVALID_ENCODING_RANGE The conversion has failed due to invalid encoding range.
	 */
	virtual result GetCharCount(const Tizen::Base::ByteBuffer& bytes, int byteIndex, int byteCount, int& charCount, bool flush = false) const;

	/**
	 * Decodes an instance of Tizen::Base::ByteBuffer into an instance of Tizen::Base::WcharBuffer.
	 *
	 * @since			2.0
	 *
	 * @return		                       A pointer to the Tizen::Base::WcharBuffer instance where the resultant decoded data is stored, @n
	 *                                     else @c null if an exception occurs @n
	 *				                       The buffer limit is the position of the last decoded byte plus one and the starting position is zero.
	 * @param[in]	bytes                 An instance of Tizen::Base::ByteBuffer to decode
	 * @param[in]   flush                 Set to @c true to allow this instance to flush its state at the end of the conversion, @n
	 *				                      else @c false
	 * @exception	E_SUCCESS                The method is successful.
	 * @exception	E_OUT_OF_MEMORY       The memory is insufficient.
	 * @exception	E_INVALID_ARG            A specified input parameter is invalid, or
	 *                                         the specified @c bytes is empty.
	 * @exception	E_INVALID_ENCODING_RANGE The specified string contains code points that are outside the bounds of the character encoding scheme.
	 * @remarks		The specific error code can be accessed using the GetLastResult() method.
	 */
	virtual Tizen::Base::WcharBuffer* GetCharsN(const Tizen::Base::ByteBuffer& bytes, bool flush = false) const;

	/**
	 * Decodes an instance of Tizen::Base::ByteBuffer into an instance of Tizen::Base::WcharBuffer as per the specified range.
	 *
	 * @since			2.0
	 * @return		                         A pointer to the Tizen::Base::WcharBuffer instance where the resultant decoded data is stored, @n
	 *                                       else @c null if an exception occurs @n
	 *				                         The buffer limit is the position of the last decoded byte and the starting position is zero.
	 * @param[in]	bytes                    An instance of Tizen::Base::ByteBuffer to decode
	 * @param[in]   byteIndex                 The index from where decoding begins
	 * @param[in]   byteCount                The total number of bytes to decode
	 * @param[in]   flush                    Set to @c true to allow this instance to flush its state at the end of the conversion, @n
	 *				                         else @c false
	 * @exception	E_SUCCESS                The method is successful.
	 * @exception	E_OUT_OF_MEMORY          The memory is insufficient.
	 * @exception	E_INVALID_ARG            A specified input parameter is invalid, or
	 *                                       the specified @c bytes is empty.
	 * @exception	E_OUT_OF_RANGE	         The value of an argument is outside the valid range defined by the method, or
	 *									       the length of the specified @c byteIndex or @c byteCount is greater than the length of the specified @c bytes.
	 * @exception	E_UNDERFLOW	             This operation has caused the memory to underflow, or
	 *										  the sum of the length of the specified @c byteIndex and @c byteCount is greater than the length of the specified @c bytes.
	 * @exception	E_INVALID_ENCODING_RANGE The specified string contains code points that are outside the bounds of the character encoding scheme.
	 * @remarks     This method maintains state consistency between conversions.
	 * @remarks		The specific error code can be accessed using the GetLastResult() method.
	 * @remarks		The pointer to the Tizen::Base::ByteBuffer instance is not terminated by a @c null character.
	 *
	 */
	virtual Tizen::Base::WcharBuffer* GetCharsN(const Tizen::Base::ByteBuffer& bytes, int byteIndex, int byteCount,
		bool flush = false) const;

private:
	/**
	 * The implementation of this copy constructor is intentionally blank and declared as private to
	 * prohibit copying of objects.
	 */
	Utf8Decoder(const Utf8Decoder& utf8Decoder);

	/**
	 * The implementation of this copy assignment operator is intentionally blank and declared as private
	 * to prohibit copying of objects.
	 */
	Utf8Decoder& operator =(const Utf8Decoder& utf8Decoder);

	friend class _Utf8DecoderImpl;
	class _Utf8DecoderImpl* __pUtf8DecoderImpl;
};


} } // Tizen::Text
#endif //_FTEXT_UTF8_DECODER_H_
