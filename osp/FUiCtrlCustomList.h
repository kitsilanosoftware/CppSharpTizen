//
// Open Service Platform
// Copyright (c) 2012-2013 Samsung Electronics Co., Ltd.
//
// Licensed under the Flora License, Version 1.0 (the License);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://floralicense.org/license/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an AS IS BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

/**
 * @file	FUiCtrlCustomList.h
 * @brief	This is the header file for the %CustomList class.
 *
 * This header file contains the declarations of the %CustomList class and its helper classes.
 */

#ifndef _FUI_CTRL_CUSTOM_LIST_H_
#define _FUI_CTRL_CUSTOM_LIST_H_

#include <FBaseObject.h>
#include <FBaseTypes.h>
#include <FGrpRectangle.h>
#include <FUiControl.h>
#include <FUiContainer.h>
#include <FUiCtrlCustomListTypes.h>
#include <FUiICustomItemEventListener.h>
#include <FUiCtrlCustomListItem.h>
#include <FUiCtrlListTypes.h>

namespace Tizen { namespace Ui { namespace Controls
{

/**
 * @if OSPDEPREC
 * @class		CustomList
 * @brief       <i> [Deprecated] </i> This class defines the common behavior of a %CustomList control.
 *
 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
 * @since		2.0
 *
 * The %CustomList class represents a list which has user-configured items. An item in a custom list can have
 * different layout and height than the other items. Each item is composed of elements, which can be texts and bitmaps
 * and is configured using CustomListItem and CustomListItemFormat.
 *
 * When an item in a custom list is selected or deselected, an item event is generated. It is passed on to all item event listeners
 * that have registered an interest in item events generated by the custom list. If an application wants to perform tasks when a custom
 * list item is selected and deselected, it must implement ICustomItemEventListener and register the listener to receive events from
 * the custom list by calling the custom list's AddCustomItemEventListener() method.
 *
 * Note that CustomListItem and CustomListItemFormat need to be created on a heap. The items of a custom list are deleted automatically
 * when the %CustomList control is destroyed. If you want to remove certain list items, you must use RemoveItemAt(). CustomListItemFormat
 * must be deleted by the application.
 *
 * Refer to CustomListItem and CustomListItemFormat.
 *
 * Example:
 *
 * @image html ui_controls_customlist.png
 *
 *
 * This is a simple UI application that uses a %CustomList control.
 *
 *
 * @code
//Sample code for CustomListSample.h
#include <FUi.h>

// Forward Declaration
class CustomListElement;

class CustomListSample
	: public Tizen::Ui::Controls::Form
	, public Tizen::Ui::ICustomItemEventListener
{
public:
	CustomListSample(void)
	: __pCustomList(null)
	, __pCustomListItemFormat(null)
	, __pListElement(null){}

	bool Initialize(void);
	result AddListItem(Tizen::Ui::Controls::CustomList& customList, Tizen::Base::String itemText,
				Tizen::Graphics::Bitmap* pBitmapNormal, Tizen::Graphics::Bitmap* pBitmapFocused);

	virtual result OnInitializing(void);
	virtual result OnTerminating(void);

	// ICustomItemEventListener
	virtual void OnItemStateChanged(const Tizen::Ui::Control& source, int index, int itemId, Tizen::Ui::ItemStatus status);
	virtual void OnItemStateChanged(const Tizen::Ui::Control& source, int index, int itemId, int elementId, Tizen::Ui::ItemStatus status);

private:
	static const int ID_LIST_ITEM = 101;
	static const int ID_LIST_TEXT = 102;
	static const int ID_LIST_BITMAP = 103;
	static const int ID_FORMAT_CUSTOM = 104;

	Tizen::Ui::Controls::CustomList* __pCustomList;
	Tizen::Ui::Controls::CustomListItemFormat* __pCustomListItemFormat;
	CustomListElement* __pListElement;
};
 *	@endcode
 *
 *	@code
// Sample code for CutomListSample.cpp
#include <FApp.h>
#include <FGraphics.h>

#include "CustomListSample.h"

using namespace Tizen::App;
using namespace Tizen::Base;
using namespace Tizen::Graphics;
using namespace Tizen::Ui;
using namespace Tizen::Ui::Controls;

class CustomListElement
	: public ICustomListElement
{
public:
	result
	DrawElement(const Tizen::Graphics::Canvas& canvas, const Tizen::Graphics::Rectangle& rect, CustomListItemStatus itemStatus)
	{
		result r = E_SUCCESS;

		Canvas* pCanvas = const_cast<Canvas*>(&canvas);

		pCanvas->SetLineWidth(5);
		pCanvas->SetForegroundColor(Color::GetColor(COLOR_ID_GREEN));
		if (pCanvas->DrawRectangle(rect) != E_SUCCESS)
		{
			return r;
		}

		if (pCanvas->DrawText(Point(rect.x+20, rect.y+20), L"Custom") != E_SUCCESS)
		{
			return r;
		}

		return r;
	}
};

bool
CustomListSample::Initialize()
{
	Construct(FORM_STYLE_NORMAL);
	return true;
}

result
CustomListSample::OnInitializing(void)
{
	result r = E_SUCCESS;

	// Creates an instance of CustomListElement
	__pListElement = new CustomListElement();

	// Creates an instance of CustomList
	__pCustomList = new CustomList();
	__pCustomList->Construct(Rectangle(0, 0, GetClientAreaBounds().width, GetClientAreaBounds().height), CUSTOM_LIST_STYLE_NORMAL);
	__pCustomList->AddCustomItemEventListener(*this);

	// Creates an instance of CustomListItemFormat
	__pCustomListItemFormat = new CustomListItemFormat();
	__pCustomListItemFormat->Construct();
	__pCustomListItemFormat->AddElement(ID_LIST_TEXT, Rectangle(10, 25, 150, 80));
	__pCustomListItemFormat->AddElement(ID_LIST_BITMAP, Rectangle(170, 10, 70, 80));
	__pCustomListItemFormat->AddElement(ID_FORMAT_CUSTOM, Rectangle(GetClientAreaBounds().width - 120, 20, 100, 60));
	__pCustomListItemFormat->SetElementEventEnabled(ID_LIST_TEXT, true);
	__pCustomListItemFormat->SetElementEventEnabled(ID_LIST_BITMAP, true);
	__pCustomListItemFormat->SetElementEventEnabled(ID_FORMAT_CUSTOM, true);

	// Gets instances of Bitmap
	AppResource* pAppResource = Application::GetInstance()->GetAppResource();
	Bitmap *pBitmapNormal  = pAppResource->GetBitmapN(L"tizen.png");
	Bitmap *pBitmapFocused = pAppResource->GetBitmapN(L"tizen.png");

	// Adds the item to the custom list
	for (int i = 0; i < 30; i++)
	{
		String str = L"Text";
		str.Append(i+1);
		AddListItem(*__pCustomList, str, pBitmapNormal, pBitmapFocused);
	}

	// Adds the custom list to the form
	AddControl(*__pCustomList);

	// Deallocates bitmaps
	delete pBitmapNormal;
	delete pBitmapFocused;

	return r;
}

result
CustomListSample::OnTerminating(void)
{
	result r = E_SUCCESS;

	// Deallocates item format and the element
	delete __pCustomListItemFormat;
	delete __pListElement;

	return r;
}

result
CustomListSample::AddListItem(CustomList& customList, String itemText, Bitmap* pBitmapNormal, Bitmap* pBitmapFocused)
{
	// Creates an instance of CustomListItem
	CustomListItem* pItem = new CustomListItem();

	pItem->Construct(100);
	pItem->SetItemFormat(*__pCustomListItemFormat);
	pItem->SetElement(ID_LIST_TEXT, itemText);
	pItem->SetElement(ID_LIST_BITMAP, *pBitmapNormal, pBitmapFocused);
	pItem->SetElement(ID_FORMAT_CUSTOM, *(static_cast<ICustomListElement *>(__pListElement)));

	customList.AddItem(*pItem, ID_LIST_ITEM);

	return E_SUCCESS;
}

// ICustomItemEventListener implementation
void
CustomListSample::OnItemStateChanged(const Control& source, int index, int itemId, ItemStatus status)
{
	switch (itemId)
	{
	case ID_LIST_ITEM:
		{
			// ....
		}
		break;
	default:
		break;
	}
}

void
CustomListSample::OnItemStateChanged(const Control& source, int index, int itemId, int elementId, Tizen::Ui::ItemStatus status)
{
	switch (itemId)
	{
	case ID_LIST_ITEM:
		{
			switch (elementId)
			{
			case ID_LIST_TEXT:
				{
					// ....
				}
				break;

			case ID_LIST_BITMAP:
				{
					// ....
				}
				break;
			default:
				break;
			}
		}
		break;
	default:
		break;
	}
}
 * @endcode
 * @endif
 */
class _OSP_EXPORT_ CustomList
	: public Tizen::Ui::Control
{
public:
	/**
	 * @if OSPDEPREC
	 * The object is not fully constructed after this constructor is called. For full construction, the Construct() method must be called right after calling this constructor.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 * @endif
	 */
	CustomList(void);

	/**
	 * @if OSPDEPREC
	 * This polymorphic destructor should be overridden if required. This way, the destructors of the derived classes are called when the destructor of this interface is called.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 * @endif
	 */
	virtual ~CustomList(void);

public:
	/**
 	 * @if OSPDEPREC
	 * Initializes this instance of %CustomList with the specified parameters.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since           2.0
	 *
	 * @return	An error code
	 * @param[in]	rect                The x and y position of the top-left corner of the %CustomList control along with the width and height of the control
	 * @param[in]	style               The style set of %CustomList
	 * @param[in]	itemDivider			Set to @c true to display the divider, @n
	 *							        else @c false
	 * @exception	E_SUCCESS           The method is successful.
	 * @exception	E_INVALID_ARG     A specified input parameter is invalid.
	 * @exception	E_SYSTEM            A system error has occurred.
	 * @remarks	The size of the control must be within the range as defined by the minimum and maximum size.
	 * @remarks	The minimum size of this control is 92 x 72 on a WVGA screen, 60 x 48 on a HVGA screen and 46 x 36 on a WQVGA screen.
	 * @endif
	 */
	result Construct(const Tizen::Graphics::Rectangle& rect, CustomListStyle style, bool itemDivider = true);


	/**
	 * @if OSPDEPREC
	 * Adds the custom item event listener instance. @n
	 * The added listener gets notified when the state of CustomListItem is changed.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @param[in]	listener	The event listener to be added
	 * @endif
	 */
	void AddCustomItemEventListener(Tizen::Ui::ICustomItemEventListener& listener);

	/**
	 * @if OSPDEPREC
	 * Removes the custom item event listener instance. @n
	 * The removed listener is not notified even when custom item events are fired.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @param[in]	listener	The event listener to be removed
	 * @endif
	 */
	void RemoveCustomItemEventListener(Tizen::Ui::ICustomItemEventListener& listener);

	/**
 	 * @if OSPDEPREC
	 * Adds the specified item to the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		An error code
	 * @param[in]	item				The custom list item to be added
	 * @param[in]	itemId       		The item ID for the item
	 * @exception	E_SUCCESS			The method is successful.
	 * @exception	E_SYSTEM			A system error has occurred.
	 * @remarks	The specified @c itemId can be used to identify a specific CustomListItem or @n
	 *				to associate user-allocated resources. @n
	 *				Note that the custom list does not throw an exception @n
	 * 		if the same itemID is assigned to multiple items. @n
	 * @remarks		The added item is deleted automatically when the list is destroyed. @n
	 *				Do not add, insert, or set an item that already belongs to the %CustomList control.
	 * @endif
	 */
	result AddItem(const CustomListItem& item, int itemId = LIST_ITEM_UNSPECIFIED_ID);

	/**
	 * @if OSPDEPREC
	 * Inserts the specified item to %CustomList at the specified index.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return      An error code
	 * @param[in] 	index		        The index at which to insert the item
	 * @param[in]	item				The custom list item to be inserted
	 * @param[in] 	itemId            	The item ID for the item
	 * @exception	E_SUCCESS			The method is successful.
	 * @exception 	E_INVALID_ARG     	A specified input parameter is invalid. @n
	 *									The specified @c index is less than @c 0 or greater than or equal to the item count.
	 * @exception	E_SYSTEM			A system error has occurred.
	 * @remarks		The inserted item is deleted automatically when the list is destroyed. @n
	 *				Do not add, insert, or set an item that already belongs to the %CustomList control.
	 * @endif
	 */
	result InsertItemAt(int index, const CustomListItem& item, int itemId = LIST_ITEM_UNSPECIFIED_ID);

	/**
	 * @if OSPDEPREC
	 * Sets the contents of the item at the specified index in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		An error code
	 * @param[in] 	index		    	The index at which to set the contents of the item
	 * @param[in]	item		    	The custom list item to be set
	 * @param[in] 	itemId          	The item ID for the item
	 * @exception	E_SUCCESS	    	The method is successful.
	 * @exception 	E_INVALID_ARG   	A specified input parameter is invalid. @n
	 *                              	The specified @c index is less than @c 0 or greater than or equal to the item count.
	 * @exception	E_SYSTEM			A system error has occurred.
	 * @remarks		Do not add, insert, or set an item that already belongs to the %CustomList control.
	 * @endif
	 */
	result SetItemAt(int index, const CustomListItem& item, int itemId = LIST_ITEM_UNSPECIFIED_ID);

	/**
 	 * @if OSPDEPREC
	 * Removes the item at the specified index in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		An error code
	 * @param[in]	index				The index of the item to be deleted
	 * @exception	E_SUCCESS			The method is successful.
	 * @exception 	E_INVALID_ARG   	The specified input parameter is invalid. @n
	 *									The specified @c index is less than @c 0 or greater than or equal to the item count.
	 * @exception	E_SYSTEM			A system error has occurred.
	 * @remarks   	The removed list item is deleted from the memory.
	 * @endif
	 */
	result RemoveItemAt(int index);

	/**
	 * @if OSPDEPREC
	 * Removes all the items from the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		An error code
	 * @exception	E_SUCCESS			The method is successful.
	 * @exception	E_SYSTEM			A system error has occurred.
	 * @remarks   	The removed list items are deleted from the memory.
	 * @endif
	 */
	result RemoveAllItems(void);

	/**
 	 * @if OSPDEPREC
	 * Gets the item at the specified index in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		A custom list item, @n
	 *            	else @c null if the specified index is out of range
	 * @param[in] 	index       The index of the item to get
	 * @endif
	 */
	const CustomListItem* GetItemAt(int index) const;

	/**
	 * @if OSPDEPREC
	 * Gets the number of items in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		The number of items in %CustomList, @n
	 *          	else @c -1 if an error occurs
	 * @endif
	 */
	int GetItemCount(void) const;

	/**
	 * @if OSPDEPREC
	 * Enables or disables the status of the item at the specified @c index in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
   	 *
	 * @return		An error code
	 * @param[in] 	index				The index of the item whose status is to be set
	 * @param[in]	enable				Set to @c true to enable, @n
	 *									else @c false
	 * @exception	E_SUCCESS			The method is successful.
	 * @exception	E_SYSTEM			A system error has occurred.
	 * @endif
	 */
	result SetItemEnabled(int index, bool enable);

	/**
	 * @if OSPDEPREC
	 * Checks whether the specified index in the %CustomList control is enabled.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return      @c true if the item is enabled, @n
	 *				else @c false
	 * @param[in]	index	The index of the item to be checked
	 * @endif
	 */
	bool IsItemEnabled(int index) const;

	/**
	 * @if OSPDEPREC
	 * Sets the check status of the item at the specified index in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		An error code
	 * @param[in]	index				The index of the item to be set
	 * @param[in] 	check				The check status
	 * @exception	E_SUCCESS			The method is successful.
	 * @exception	E_SYSTEM			A system error has occurred.
	 * @remarks		This method can only be used when the style of the list allows selection.
	 * @endif
	 */
	result SetItemChecked(int index, bool check);

	/**
 	 * @if OSPDEPREC
	 * Checks whether the item at the specified index is checked in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		@c true if the item is checked, @n
	 *				else @c false
	 * @param[in] 	index		The index of the item to check
	 * @remarks		This method can only be used when the style of the list allows selection.
	 * @endif
	 */
	bool IsItemChecked(int index) const;

	/**
	 * @if OSPDEPREC
	 * Sets the check status for all items of the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		An error code
	 * @param[in]   check      		 	The check status
	 * @exception	E_SUCCESS			The method is successful.
	 * @exception   E_SYSTEM			A system error has occurred.
	 * @remarks	This method can only be used when the style of the list allows multiple selections.
	 * @endif
	 */
	result SetAllItemsChecked(bool check);


	/**
	 * @if OSPDEPREC
	 * Removes the checked items of the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		An error code
	 * @exception	E_SUCCESS			The method is successful.
	 * @exception	E_SYSTEM			A system error has occurred.
	 * @remarks		This method can only be used when the style of the list allows multiple selections.
	 * @remarks   	The removed list items are deleted from the memory.
	 * @endif
	 */
	result RemoveAllCheckedItems(void);

	/**
 	 * @if OSPDEPREC
	 * Gets the first item of all the checked items in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return  	The index of the first checked item, @n
	 *          	else @c -1 if no item is checked or an error occurs
	 * @endif
	 */
	int GetFirstCheckedItemIndex(void) const;

	/**
	 * @if OSPDEPREC
	 * Gets the last item of all the checked items in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return  	The index of the last checked item, @n
	 *          	else @c -1 if no item is checked or an error occurs
	 * @endif
	 */
	int GetLastCheckedItemIndex(void) const;

	/**
	 * @if OSPDEPREC
	 * Gets the next checked item from the specified index in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return  	The index of the next checked item @n
	 *              else @c -1 if no more item after the specified index is checked, @n
	 *              or the specified @c index is less than @c 0 or greater than the item count.
	 * @param[in]	index		The index of the %CustomList control item
	 * endif
	 */
	int GetNextCheckedItemIndexAfter(int index) const;

	/**
 	 * @if OSPDEPREC
	 * Gets the index of the item at the specified position.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		The index of the item, @n
	 *				else @c -1 if the specified position is not inside any of the items
	 * @param[in] x The x position of the point
	 * @param[in] y The y position of the point
	 * @endif
	 */
	int GetItemIndexFromPosition(int x, int y) const;

	/**
 	 * @if OSPDEPREC
	 * Gets the index of the item at the specified position.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return      The index of the item, @n
	 *				else @c -1 if the specified position is not inside any of the items
	 * @param[in]   position    The position of the point
 	 * @endif
	 */
	int GetItemIndexFromPosition(const Tizen::Graphics::Point& position) const;

	/**
	 * @if OSPDEPREC
	 * Gets the index of the first item from the visible items in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return  	The index of the first item, @n
	 *          	else @c -1 if no item is visible
	 * @endif
	 */
	int GetTopDrawnItemIndex(void) const;

	/**
	 * @if OSPDEPREC
	 * Gets the index of the last item from the visible items in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return      The index of the last item, @n
	 *          	else @c -1 if no item is visible
	 * @endif
	 */
	int GetBottomDrawnItemIndex(void) const;

	/**
	 * @if OSPDEPREC
	 * Sets the background color of the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since       2.0
	 *
	 * @param[in]   color    The background color
	 * @endif
	 */
	void SetBackgroundColor(const Tizen::Graphics::Color& color);

	/**
	 * @if OSPDEPREC
	 * Sets the text to be displayed when there is no item in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @param[in]	text	The text message to be displayed
	 * @endif
	 */
	void SetTextOfEmptyList(const Tizen::Base::String& text);

	/**
	 * @if OSPDEPREC
	 * Sets the color of the text to be displayed when there is no item in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since	2.0
	 *
	 * @param[in]	color	The color of the text to be displayed
 	 * @endif
	 */
	void SetTextColorOfEmptyList(const Tizen::Graphics::Color& color);

	/**
	 * @if OSPDEPREC
	 * Gets the color of the text to display when there is no item in the CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since	2.0
	 *
	 * @return		The color of the text to be displayed
	 * @endif
	 */
	Tizen::Graphics::Color GetTextColorOfEmptyList(void) const;

	/**
	 * @if OSPDEPREC
	 * Gets the index of the item.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return	The index of the item, @n
	 * 		else @c -1 if no item has the specified item ID
	 * @param[in]	itemId		The item ID of the %CustomList control item
	 * @remarks	One or more indexes can have the same item ID, @n
	 *				and this method returns the first item from such items.
	 * @endif
	 */
	int GetItemIndexFromItemId(int itemId) const;

	/**
	 * @if OSPDEPREC
	 * Gets the item ID of the item at the specified index.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		The item ID of the item, @n
	 *				else @c -1 if the specified @c index is less than @c 0 or greater than the item count
	 * @param[in]	index	The index of the %CustomList control item
	 * @endif
	 */
	int GetItemIdAt(int index) const;

	/**
	 * @if OSPDEPREC
	 * Scrolls to the bottom of the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 * @endif
	 */
	void ScrollToBottom(void);

	/**
	 * @if OSPDEPREC
	 * Scrolls to the top of the %CustomList.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 * @endif
	 */
	void ScrollToTop(void);

	/**
	 * @if OSPDEPREC
	 * Scrolls to the item at the specified index. @n
	 * The specified item is drawn at the top of the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since		2.0
	 *
	 * @return		An error code
	 * @param[in]	index				The index of the %CustomList control item
	 * @exception	E_SUCCESS			The method is successful.
	 * @exception	E_SYSTEM			A system error has occurred.
	 * @exception	E_INVALID_ARG   	The specified input parameter is invalid. @n
	 *									The specified @c index is less than @c 0 or greater than the item count.
	 * @endif
	 */
	result ScrollToTop(int index);

	/**
	 * @if OSPDEPREC
	 * Draws and shows the item at the specified index in the %CustomList control.
	 *
	 * @brief       <i> [Deprecated] </i>
	 * @deprecated	This class is deprecated. Instead of using this class, use ListView class.
	 * @since			2.0
	 *
	 * @return	An error code
	 *
	 * @param[in]	index					The index of the %CustomList control item
	 * @exception	E_SUCCESS				The method is successful.
	 * @exception	E_SYSTEM                A system error has occurred.
	 * @exception	E_INVALID_OPERATION		The item has never been drawn before calling this method.
	 * @exception	E_INVALID_ARG         	The specified input parameter is invalid. @n
	 *										The specified @c index is less than @c 0 or greater than the item count.
	 * @endif
	 */
	result RefreshItem(int index);

private:
	//
	// The implementation of this copy constructor is intentionally blank and declared as private to prohibit copying of objects.
	//
	CustomList(const CustomList& rhs);

	//
	// The implementation of this copy assignment operator is intentionally blank and declared as private to prohibit copying of objects.
	//
	CustomList& operator =(const CustomList& rhs);

	friend class _CustomListImpl;

}; //CustomList

}}} //Tizen::Ui::Controls

#endif // _FUI_CTRL_CUSTOM_LIST_H_
