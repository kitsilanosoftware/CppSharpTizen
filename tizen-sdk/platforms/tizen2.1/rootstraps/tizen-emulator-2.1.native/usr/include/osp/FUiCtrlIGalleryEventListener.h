//
// Open Service Platform
// Copyright (c) 2012-2013 Samsung Electronics Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the License);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
/**
 * @file		FUiCtrlIGalleryEventListener.h
 * @brief		This is the header file for the %IGalleryEventListener interface.
 *
 * This header file contains the declarations of the %IGalleryEventListener interface. @n
 * If an event is generated, a method of this interface is called. @n
 * Therefore, when an application performs jobs related to the event, the methods of this interface are executed.
 *
 */
#ifndef _FUI_CTRL_IGALLERY_EVENT_LISTENER_H_
#define _FUI_CTRL_IGALLERY_EVENT_LISTENER_H_

#include <FBaseRtIEventListener.h>

namespace Tizen { namespace Ui { namespace Controls
{
class Gallery;
}}}

namespace Tizen { namespace Ui { namespace Controls
{

/**
 * @interface	IGalleryEventListener
 * @brief		This interface defines the listener for the events generated by the Gallery control.
 *
 * @since		2.0
 *
 * The %IGalleryEventListener interface is the listener interface for receiving Gallery events.
 * The class that processes a gallery event implements this interface, and the instance created using the Gallery's
 * AddGalleryEventListener() method. When the gallery event occurs, a method of that instance is invoked.
 *
 * For more information on the class features, see <a href="../org.tizen.native.appprogramming/html/guide/ui/implementing_gallery.htm">Gallery</a>.
 */
class _OSP_EXPORT_ IGalleryEventListener
	: virtual public Tizen::Base::Runtime::IEventListener
{
public:
	/**
	 * This polymorphic destructor should be overridden if required.@n
	 * This way, the destructors of the derived classes are called when the destructor of this interface is called.
	 *
	 * @since 2.0
	 */
	virtual ~IGalleryEventListener(void) {}

	/**
	 * Called when the current item changes.
	 *
	 * @since 	2.0
	 *
	 * @param[in] 	gallery		 		The source of the event
 	 * @param[in] 	currentItemIndex 	The current item index
	 */
	virtual void OnGalleryCurrentItemChanged(Tizen::Ui::Controls::Gallery& gallery, int currentItemIndex) = 0;

	/**
	 * Called when the item is clicked.
	 *
	 * @since 	2.0
	 *
	 * @param[in] 	gallery		The source of the event
 	 * @param[in] 	itemIndex	The index of the item
	 */
	virtual void OnGalleryItemClicked(Tizen::Ui::Controls::Gallery& gallery, int itemIndex) = 0;

	/**
     * Called when the slide-show starts.
     *
     * @since 	2.0
     *
	 * @param[in]	gallery        The source of the event
     */
	virtual void OnGallerySlideShowStarted(Tizen::Ui::Controls::Gallery& gallery) = 0;

	/**
     * Called when the slide-show stops.
     *
     * @since 		2.0
     *
	 * @param[in] 	gallery        The source of the event
     */
	virtual void OnGallerySlideShowStopped(Tizen::Ui::Controls::Gallery& gallery) = 0;


protected:
	//
	//This method is for internal use only. Using this method can cause behavioral, security-related,
	//and consistency-related issues in the application.
	//
	virtual void GalleryEventListener_Reserved1(void) {}

	//
	//This method is for internal use only. Using this method can cause behavioral, security-related,
	//and consistency-related issues in the application.
	//
	virtual void GalleryEventListener_Reserved2(void) {}

	//
	//This method is for internal use only. Using this method can cause behavioral, security-related,
	//and consistency-related issues in the application.
	//
	virtual void GalleryEventListener_Reserved3(void) {}
}; // IGalleryEventListener

}}} // Tizen::Ui::Controls

#endif // _FUI_CTRL_IGALLERY_EVENT_LISTENER_H_
